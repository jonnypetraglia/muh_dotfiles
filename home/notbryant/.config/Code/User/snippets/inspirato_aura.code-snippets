{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Insert Aura Section Header Comments":{
		"scope": "html"
		, "prefix": "aura:headers"
		, "body": [
			"<!-- Declare Attributes -->"
			, "$0"
			, "<!-- Declare Events -->"
			, "<!-- Declare Handlers -->"
			, "<!-- Declare Methods -->"
			, "<!-- Declare References -->"
			, "<!-- Declare Components -->"
		]
		, "description": "Inserts standard Aura component section headers, into the component markup."
	}
	, "Insert Standard Aura Outer Connected Component Attributes":{
		"scope": "html"
		, "prefix": "aura:outerConnected"
		, "body": "controller=\"$1_$2Controller\" implements=\"flexipage:availableForAllPageTypes,force:appHostable\" access=\"global\" extends=\"c:ltcore_ConnectedBase\"$0"
		, "description": "Inserts standard Aura component attributes to make the component be a connected outer component."
	}
	, "Insert Base Component Inheritance":{
		"scope": "html"
		, "prefix": "aura:baseInheritance"
		, "body": "extends=\"c:ltcore_${1|Base,ConnectedBase|}\"$0"
		, "description": "Inserts a base component inheritance reference in an Aura component tag."
	}
	, "New Aura Attribute":{
		"scope": "html"
		, "prefix": "aura:attribute"
		, "body": "<aura:attribute name=\"$1\" type=\"$2\" access=\"${3|private,global,public|}\" ${4:default=\"$5\" }description=\"$6\"/>$0"
		, "description": "Inserts a new Aura attribute, into the component markup."
	}
	, "New Aura Event Registration":{
		"scope": "html"
		, "prefix": "aura:eventRegistration"
		, "body": "<aura:registerEvent name=\"$1\" type=\"c:$2_$1\"/>"
		, "description": "Inserts a new Aura event registration, into the component markup."
	}
	, "New Aura Internal Handler":{
		"scope": "html"
		, "prefix": "aura:handlerInternal"
		, "body": "<aura:handler name=\"${1|init,change|}\" value=\"{!${2|this,v.|}\" action=\"{!c.${3|on,do|}}\"/>$0"
		, "description": "Inserts a new Aura handler for an internal event such as init or change, into the component markup."
	}
	, "New Aura Event Handler":{
		"scope": "html"
		, "prefix": "aura:handlerEvent"
		, "body": "<aura:handler name=\"$1\" event=\"c:$2_$1\" action=\"{!c.on$1}\"/>$0"
		, "description": "Inserts a new Aura handler for an external component or application event, into the component markup."
	}
	, "New Aura Method Simple":{
		"scope": "html"
		, "prefix": "aura:method"
		, "body": "<aura:method name=\"$1\" action=\"{!c.$2}\" description=\"$3\"/>$0"
		, "description": "Inserts a new simple Aura method, into the component markup."
	}
	, "New Aura Method Parameterized":{
		"scope": "html"
		, "prefix": "aura:methodParamaterized"
		, "body": [
			"<aura:method name=\"$1\" action=\"{!c.$2}\" description=\"$3\">"
			, "	$0"
			, "</aura:method>"
		]
		, "description": "Inserts a new parameterized Aura method, into the component markup."
	}
	, "New Aura Method Parameter":{
		"scope": "html"
		, "prefix": "aura:methodParameter"
		, "body": "<aura:attribute name=\"$1\" type=\"$2\" required=\"${3|false,true|}\"${4: default=\"$5\"}/>"
		, "description": "Inserts a new method parameter for a parameterized Aura method, into the component markup."
	}
	, "Insert Overlay Reference":{
		"scope": "html"
		, "prefix": "aura:overlayRef"
		, "body": [
			""
			, "<lightning:overlayLibrary aura:id=\"overlayLib\"/>"
		]
		, "description": "Inserts a standard Lightning Overlay Library reference, into the component markup."
	}
	, "Insert Notifications Reference":{
		"scope": "html"
		, "prefix": "aura:notificationsRef"
		, "body": [
			""
			, "<lightning:notificationsLibrary aura:id=\"notificationsLib\"/>"
		]
		, "description": "Inserts a standard Lightning Overlay Library reference, into the component markup."
	}
}